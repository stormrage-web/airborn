# -*- coding: utf-8 -*-
"""aeroflot-inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ctFB17eeH1TciMfOe3PKS10q59qouSM
"""

!pip install pytorch-lightning
!pip install pytorch-forecasting
!pip install cpflows

import matplotlib.pyplot as plt
import torch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
from typing import Dict
from pytorch_forecasting import TimeSeriesDataSet
from pytorch_forecasting.models.nn import LSTM
from pytorch_forecasting.models.temporal_fusion_transformer import TemporalFusionTransformer
from pytorch_forecasting.data.encoders import NaNLabelEncoder
from pytorch_forecasting.models.nhits import NHiTS
from lightning.pytorch.utilities.model_summary import ModelSummary
from torch.nn.utils import rnn
from pytorch_forecasting.models.base_model import AutoRegressiveBaseModel
from pytorch_forecasting.models.nn import LSTM
from sklearn.preprocessing import MinMaxScaler
from datetime import timedelta
import lightning.pytorch as pl
from pytorch_forecasting import Baseline, NBeats, TimeSeriesDataSet
from lightning.pytorch.tuner import Tuner
from pytorch_forecasting.metrics import MAE, SMAPE, MQF2DistributionLoss, QuantileLoss

from google.colab import drive
drive.mount('/content/drive')

class_df = pd.read_csv('/content/drive/MyDrive/data_N.csv')
class_df['DD3'] = pd.to_datetime(class_df['DD']) - timedelta(days=3)
class_df['DD5'] = pd.to_datetime(class_df['DD']) - timedelta(days=5)
class_df['DD7'] = pd.to_datetime(class_df['DD']) - timedelta(days=7)
class_df['DD14'] = pd.to_datetime(class_df['DD']) - timedelta(days=14)
class_df['DD30'] = pd.to_datetime(class_df['DD']) - timedelta(days=30)
class_df['DD60'] = pd.to_datetime(class_df['DD']) - timedelta(days=60)
class_df['DD3'] = class_df['DD3'].astype(str)
class_df['DD5'] = class_df['DD5'].astype(str)
class_df['DD7'] = class_df['DD7'].astype(str)
class_df['DD14'] = class_df['DD14'].astype(str)
class_df['DD30'] = class_df['DD30'].astype(str)
class_df['DD60'] = class_df['DD60'].astype(str)

msc_temp = pd.read_csv('/content/drive/MyDrive/moscow_temp.csv', header=2)
msc_temp[['date', 'time']] = msc_temp['time'].str.split('T', expand=True)
msc_temp = pd.DataFrame(msc_temp.groupby('date')['temperature_2m (°C)'].mean().reset_index())
msc_temp['date'] = pd.to_datetime(msc_temp['date']).dt.strftime('%Y-%m-%d')
aed_temp = pd.read_csv('/content/drive/MyDrive/adler_temp.csv', header=2)
aed_temp[['date', 'time']] = aed_temp['time'].str.split('T', expand=True)
aed_temp = pd.DataFrame(aed_temp.groupby('date')['temperature_2m (°C)'].mean().reset_index())
aed_temp['date'] = pd.to_datetime(aed_temp['date']).dt.strftime('%Y-%m-%d')
ast_temp = pd.read_csv('/content/drive/MyDrive/astrakhan_temp.csv', header=2)
ast_temp[['date', 'time']] = ast_temp['time'].str.split('T', expand=True)
ast_temp = pd.DataFrame(ast_temp.groupby('date')['temperature_2m (°C)'].mean().reset_index())
ast_temp['date'] = pd.to_datetime(ast_temp['date']).dt.strftime('%Y-%m-%d')
usd_rub = pd.read_csv('/content/drive/MyDrive/USD_RUB.csv')[['Дата', 'Цена']]
usd_rub['Цена'] = usd_rub['Цена'].str.replace(',','.').astype('float')
jet_fuel = pd.read_csv('/content/drive/MyDrive/jet_fuel_strip.csv', 
                       header=None, 
                       names=('Date', 'Price'),
                       delimiter=';').dropna()
jet_fuel['Price'] = jet_fuel['Price'].str.replace(',','.').astype('float')
wheat = pd.read_csv('/content/drive/MyDrive/wheat.csv')[['Дата', 'Цена']]
wheat['Цена'] = wheat['Цена'].str.replace(',','.').astype('float')


usd_rub['Дата_i'] = pd.to_datetime(usd_rub['Дата'])
usd_rub = usd_rub.set_index('Дата_i')
jet_fuel['Date_i'] = pd.to_datetime(jet_fuel['Date'])
jet_fuel = jet_fuel.set_index('Date_i')
wheat['Дата_i'] = pd.to_datetime(wheat['Дата'])
wheat = wheat.set_index('Дата_i')

usd_rub = usd_rub.asfreq('D')
usd_rub['Цена'] = usd_rub['Цена'].fillna(method='ffill')
usd_rub['Дата'] = usd_rub.index
usd_rub['Дата'] = pd.to_datetime(usd_rub['Дата']).dt.strftime('%Y-%m-%d')
#jet_fuel = jet_fuel.asfreq('D')
#jet_fuel['Price'] = jet_fuel['Price'].fillna(method='ffill')
wheat = wheat.asfreq('D')
wheat['Цена'] = wheat['Цена'].fillna(method='ffill')
wheat['Дата'] = wheat.index
wheat['Дата'] = pd.to_datetime(wheat['Дата']).dt.strftime('%Y-%m-%d')

svo_aer = class_df.loc[(class_df['SORG']=='SVO') & (class_df['SDST']=='AER')]
aer_svo = class_df.loc[(class_df['SORG']=='AER') & (class_df['SDST']=='SVO')]

svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD3', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD5', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD7', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD14', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD30', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, aed_temp, left_on='DD60', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD3', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD5', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD7', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD14', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD30', right_on='date', how='inner')
svo_aer = pd.merge(svo_aer, msc_temp, left_on='DD60', right_on='date', how='inner')

aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD3', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD5', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD7', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD14', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD30', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, msc_temp, left_on='DD60', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD3', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD5', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD7', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD14', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD30', right_on='date', how='inner')
aer_svo = pd.merge(aer_svo, aed_temp, left_on='DD60', right_on='date', how='inner')

class_df = pd.concat([svo_aer, aer_svo], ignore_index=True).sort_values(by=['FLT_NUM', 'DD'])
class_df

group = class_df['FLT_NUM']

class_df = pd.merge(class_df, usd_rub, left_on='DD', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD3', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD5', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD7', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD14', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD30', right_on='Дата', how='inner')
class_df = pd.merge(class_df, usd_rub, left_on='DD60', right_on='Дата', how='inner')
#class_df = pd.merge(class_df, jet_fuel, left_on='DD', right_on='Date', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD3', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD5', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD7', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD14', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD30', right_on='Дата', how='inner')
class_df = pd.merge(class_df, wheat, left_on='DD60', right_on='Дата', how='inner')
class_df = class_df.drop('DD2', axis=1)
class_df = class_df.drop('SEG_CLASS_CODE', axis=1)
class_df.columns

class_df = class_df.sort_values(by=['FLT_NUM', 'DD'])

class_df.columns = ['DD', 'SORG', 'SDST', 'FLT_NUM', 'PASS_BK', 'DD3', 'DD5',
       'DD7', 'DD14', 'DD30', 'DD60', 'date_x', 'temp_arr',
       'date_y', 'temp_arr_3', 'date_x', 'temp_arr_5',
       'date_y', 'temp_arr_7', 'date_x', 'temp_arr_14',
       'date_y', 'temp_arr_30', 'date_x', 'temp_arr_60',
       'date_y', 'temp_dep', 'date_x', 'temp_dep_3',
       'date_y', 'temp_dep_5', 'date_x', 'temp_dep_7',
       'date_y', 'temp_dep_14', 'date_x', 'temp_dep_30',
       'date_y', 'temp_dep_60', 'Дата_x', 'usd', 'Дата_y',
       'usd3', 'Дата_x', 'usd5', 'Дата_y', 'usd7', 'Дата_x', 'usd14',
       'Дата_y', 'usd30', 'Дата_x', 'usd60', 'Дата_y', 'wheat', 'Дата_x',
       'wheat3', 'Дата_y', 'wheat5', 'Дата_x', 'wheat7', 'Дата_y', 'wheat14',
       'Дата_x', 'wheat30', 'Дата_y', 'wheat60']
class_df = class_df[['DD', 'PASS_BK', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60']]
class_df['dow'] = pd.to_datetime(class_df['DD']).dt.dayofweek.astype(str)
class_df = class_df.set_index('DD')
class_df = class_df.loc[:,~class_df.columns.duplicated()].copy()
class_df

scaler = MinMaxScaler(feature_range=(0, 100))
class_df_X = class_df.copy()  
target = class_df_X['PASS_BK'].astype(float)
class_df_X = class_df_X.drop(['PASS_BK', 'dow'], axis=1)
class_df_X = scaler.fit_transform(class_df_X)
class_df_X = pd.DataFrame(class_df_X)
class_df_X

flight_nums = [1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
               1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
               1140, 1141, 1148, 1151, 1152, 1153]
class_df_X['dow'] = class_df['dow'].values
class_df_X['time_idx'] = np.tile(np.arange(730), int(len(class_df_X) / 730))
class_df_X['group'] = np.repeat(flight_nums, 730)
class_df_X['value'] = target.values.astype('float32')
class_df_X.columns = ['temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60', 'dow', 'time_idx', 'group', 'value']

class_df_X

class_df_X['group'] = class_df_X['group'].astype('str')

class_df_X = class_df_X.loc[~(class_df_X['value']==0)]

class_df_X = class_df_X.sort_values(by=['time_idx', 'group'])

class_df_X.loc[class_df_X['group']=='1132'].head(30)

class_df_X.loc[class_df_X['group']=='1132'].drop(['time_idx', 'group', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60', 'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60'], axis=1)[:].plot(figsize=(15, 10))

class_df_X

dataset_with_covariates = TimeSeriesDataSet(
    class_df_X[:12000],
    group_ids=["group"],
    target="value",
    time_idx="time_idx",
    min_encoder_length=100,
    max_encoder_length=100,
    min_prediction_length=50,
    max_prediction_length=50,
    #time_varying_unknown_reals=['value'],
    time_varying_known_reals=['temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60'],
    time_varying_known_categoricals=['dow'],
    static_categoricals=["group"],
    categorical_encoders={
        'group': NaNLabelEncoder(add_nan=True),
    },
    allow_missing_timesteps=True
)

nbeats_dataset_with_covariates = TimeSeriesDataSet(
    class_df_X[:12000],
    group_ids=["group"],
    target="value",
    time_idx="time_idx",
    min_encoder_length=100,
    max_encoder_length=100,
    min_prediction_length=1,
    max_prediction_length=1,
    time_varying_unknown_reals=['value'],
    #time_varying_known_reals=['temp_arr',
    #   'temp_arr_3', 'temp_arr_5',
    #   'temp_arr_7', 'temp_arr_14',
    #   'temp_arr_30', 'temp_arr_60',
    #   'temp_dep', 'temp_dep_3',
    #   'temp_dep_5', 'temp_dep_7',
    #   'temp_dep_14', 'temp_dep_30',
    #   'temp_dep_60', 'usd', 
    #   'usd3', 'usd5', 'usd7', 'usd14',
    #   'usd30', 'usd60', 'wheat',
    #   'wheat3', 'wheat5', 'wheat7', 'wheat14',
    #   'wheat30', 'wheat60'],
    #time_varying_known_categoricals=['dow'],
    static_categoricals=["group"],
    categorical_encoders={
        'group': NaNLabelEncoder(add_nan=True),
    },
    allow_missing_timesteps=True
)

'''
val_dataset_with_covariates = TimeSeriesDataSet(
    class_df_X[-12000:],
    group_ids=["group"],
    target="value",
    time_idx="time_idx",
    min_encoder_length=28,
    max_encoder_length=28,
    min_prediction_length=7,
    max_prediction_length=7,
    time_varying_unknown_reals=[],
    time_varying_known_reals=['dow', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60'],
    time_varying_known_categoricals=[],
    static_categoricals=["group"],
    allow_missing_timesteps=True,
)'''

val_dataset_with_covariates = TimeSeriesDataSet.from_dataset(dataset_with_covariates,
                                                             class_df_X,
                                                             predict=True,
                                                             stop_randomization=True)

nbeats_val_dataset_with_covariates = TimeSeriesDataSet.from_dataset(nbeats_dataset_with_covariates,
                                                             class_df_X[12000:],
                                                             predict=True,
                                                             stop_randomization=True)

class LSTMModel(AutoRegressiveBaseModel):
    def __init__(
        self,
        target: str,
        target_lags: Dict[str, Dict[str, int]],
        n_layers: int,
        hidden_size: int,
        dropout: float = 0.2,
        **kwargs,
    ):
        # arguments target and target_lags are required for autoregressive models
        # even though target_lags cannot be used without covariates
        # saves arguments in signature to `.hparams` attribute, mandatory call - do not skip this
        self.save_hyperparameters()
        # pass additional arguments to BaseModel.__init__, mandatory call - do not skip this
        super().__init__(**kwargs)

        # use version of LSTM that can handle zero-length sequences
        self.lstm = LSTM(
            hidden_size=self.hparams.hidden_size,
            input_size=28,
            num_layers=self.hparams.n_layers,
            dropout=self.hparams.dropout,
            batch_first=True,
        )
        self.output_layer = nn.Linear(self.hparams.hidden_size, 1)

    def encode(self, x: Dict[str, torch.Tensor]):
        # we need at least one encoding step as because the target needs to be lagged by one time step
        # because we use the custom LSTM, we do not have to require encoder lengths of > 1
        # but can handle lengths of >= 1
        assert x["encoder_lengths"].min() >= 1
        input_vector = x["encoder_cont"].clone()
        # lag target by one
        input_vector[..., self.target_positions] = torch.roll(
            input_vector[..., self.target_positions], shifts=1, dims=1
        )
        input_vector = input_vector[:, 1:]  # first time step cannot be used because of lagging

        # determine effective encoder_length length
        effective_encoder_lengths = x["encoder_lengths"] - 1
        # run through LSTM network
        _, hidden_state = self.lstm(
            input_vector, lengths=effective_encoder_lengths, enforce_sorted=True  # passing the lengths directly
        )  # second ouput is not needed (hidden state)
        return hidden_state

    def decode(self, x: Dict[str, torch.Tensor], hidden_state):
        # again lag target by one
        input_vector = x["decoder_cont"].clone()
        input_vector[..., self.target_positions] = torch.roll(
            input_vector[..., self.target_positions], shifts=1, dims=1
        )
        # but this time fill in missing target from encoder_cont at the first time step instead of throwing it away
        last_encoder_target = x["encoder_cont"][
            torch.arange(x["encoder_cont"].size(0), device=x["encoder_cont"].device),
            x["encoder_lengths"] - 1,
            self.target_positions.unsqueeze(-1),
        ].T
        input_vector[:, 0, self.target_positions] = last_encoder_target

        if self.training:  # training mode
            lstm_output, _ = self.lstm(input_vector, hidden_state, lengths=x["decoder_lengths"], enforce_sorted=False)

            # transform into right shape
            prediction = self.output_layer(lstm_output)
            prediction = self.transform_output(prediction, target_scale=x["target_scale"])

            # predictions are not yet rescaled
            return prediction

        else:  # prediction mode
            target_pos = self.target_positions

            def decode_one(idx, lagged_targets, hidden_state):
                x = input_vector[:, [idx]]
                # overwrite at target positions
                x[:, 0, target_pos] = lagged_targets[-1]  # take most recent target (i.e. lag=1)
                lstm_output, hidden_state = self.lstm(x, hidden_state)
                # transform into right shape
                prediction = self.output_layer(lstm_output)[:, 0]  # take first timestep
                return prediction, hidden_state

            # make predictions which are fed into next step
            output = self.decode_autoregressive(
                decode_one,
                first_target=input_vector[:, 0, target_pos],
                first_hidden_state=hidden_state,
                target_scale=x["target_scale"],
                n_decoder_steps=input_vector.size(1),
            )

            # predictions are already rescaled
            return output

    def forward(self, x: Dict[str, torch.Tensor]) -> Dict[str, torch.Tensor]:
        hidden_state = self.encode(x)  # encode to hidden state
        output = self.decode(x, hidden_state)  # decode leveraging hidden state

        return self.to_network_output(prediction=output)

model = TemporalFusionTransformer.from_dataset(dataset_with_covariates,
                            learning_rate=0.001,
                            weight_decay=1e-4)

model = LSTMModel.from_dataset(dataset_with_covariates,
                               n_layers=2,
                               hidden_size=40,
                               weight_decay=1e-4,
                               optimizer="AdamW")
#model.load_state_dict(torch.load('/content/drive/MyDrive/lstm.pt'))

train_dataloader = dataset_with_covariates.to_dataloader(train=True,
                                                   batch_size=64,
                                                   num_workers=0)

val_dataloader = val_dataset_with_covariates.to_dataloader(train=False,
                                                   batch_size=64,
                                                   num_workers=0,
                                                   shuffle=False)

trainer = pl.Trainer(
    max_epochs=500,
    accelerator="cpu",
    # clipping gradients is a hyperparameter and important to prevent divergance
    # of the gradient for recurrent neural networks
    gradient_clip_val=0.1,
)

res = Tuner(trainer).lr_find(
    model,
    train_dataloaders=train_dataloader,
    val_dataloaders=val_dataloader,
    max_lr=1e-1,
    min_lr=1e-4,
)

trainer.fit(
    model,
    train_dataloaders=train_dataloader,
    val_dataloaders=val_dataloader,
)

raw_predictions = model.predict(train_dataloader, mode="raw", return_x=True, trainer_kwargs=dict(accelerator="cpu"))
for idx in range(10):  # plot 10 examples
    model.plot_prediction(raw_predictions.x, raw_predictions.output, idx=idx, add_loss_to_title=True)

raw_predictions = model.predict(val_dataloader, mode="raw", return_x=True, trainer_kwargs=dict(accelerator="cpu"))
for idx in range(10):  # plot 10 examples
    model.plot_prediction(raw_predictions.x, raw_predictions.output, idx=idx, add_loss_to_title=True)

'''
pred_ds = TimeSeriesDataSet(
    class_df_X[-30:],
    group_ids=["group"],
    target="value",
    time_idx="time_idx",
    min_encoder_length=30,
    max_encoder_length=30,
    min_prediction_length=30,
    max_prediction_length=30,
    time_varying_unknown_reals=["value"],
    time_varying_known_reals=['temp_dep', 'temp_arr', 'usd', 'wheat', 'dow'],
    time_varying_known_categoricals=[],
    static_categoricals=["group"],
    predict_mode=True
)
'''
#test_dataloader = pred_ds.to_dataloader(train=False,
#                                                   batch_size=1,
#                                                   num_workers=0)

test = class_df_X[-5000:].copy()
test.loc[test.index[-30:],'value'] = 0.0
model.eval()
predictions = model.predict(test, return_y=True)
predictions

pd.DataFrame(predictions.output[-1]).plot()
plt.show()
class_df_X[-30:]['value'].plot()

torch.save(model.state_dict(), '/content/drive/MyDrive/aeroflot_3.pt')

!tar -xvf /content/drive/MyDrive/Датасеты.tar

!unrar e /content/Датасеты/RASP2020.rar

rasp_df = pd.read_csv('/content/RASP2020.csv', delimiter=';')
rasp_df = rasp_df[['LEG_ORIG', 'LEG_DEST', 'FLT_NUMSH',
         'EFFV_DATE', 'DISC_DATE', 'FREQ']]

def predict_by_flight_num(flight_num, enc_len=100, pred_len=1):
    a = class_df_X.loc[class_df_X['group']==str(flight_num)]
    b = rasp_df.loc[rasp_df['FLT_NUMSH']==flight_num]
    orig = b['LEG_ORIG'].values[0]
    dest = b['LEG_DEST'].values[0]
    res_df = pd.DataFrame([['2019-12-31', orig, dest, 1125, 'N', 0]],
                    columns=['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK'])
    res_df = res_df.append(pd.DataFrame([['2021-01-01', orig, dest, 1125, 'N', 0]],
                    columns=['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK']))
    res_df['DD2'] = pd.to_datetime(res_df['DD'])
    res_df = res_df.set_index('DD2')
    res_df = res_df.asfreq('D')
    res_df = res_df.fillna(method='ffill')
    res_df['DD'] = res_df.index.values
    res_df['DD'] = res_df['DD'].astype(str)
    res_df['DD3'] = pd.to_datetime(res_df['DD']) - timedelta(days=3)
    res_df['DD5'] = pd.to_datetime(res_df['DD']) - timedelta(days=5)
    res_df['DD7'] = pd.to_datetime(res_df['DD']) - timedelta(days=7)
    res_df['DD14'] = pd.to_datetime(res_df['DD']) - timedelta(days=14)
    res_df['DD30'] = pd.to_datetime(res_df['DD']) - timedelta(days=30)
    res_df['DD60'] = pd.to_datetime(res_df['DD']) - timedelta(days=60)
    res_df['DD3'] = res_df['DD3'].astype(str)
    res_df['DD5'] = res_df['DD5'].astype(str)
    res_df['DD7'] = res_df['DD7'].astype(str)
    res_df['DD14'] = res_df['DD14'].astype(str)
    res_df['DD30'] = res_df['DD30'].astype(str)
    res_df['DD60'] = res_df['DD60'].astype(str)
    res_df = pd.merge(res_df, msc_temp, left_on='DD', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD3', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD5', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD7', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD14', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD30', right_on='date', how='inner')
    res_df = pd.merge(res_df, msc_temp, left_on='DD60', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD3', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD5', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD7', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD14', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD30', right_on='date', how='inner')
    res_df = pd.merge(res_df, aed_temp, left_on='DD60', right_on='date', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD3', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD5', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD7', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD14', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD30', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, usd_rub, left_on='DD60', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD3', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD5', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD7', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD14', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD30', right_on='Дата', how='inner')
    res_df = pd.merge(res_df, wheat, left_on='DD60', right_on='Дата', how='inner')
    res_df.columns = ['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK', 'DD3', 'DD5',
       'DD7', 'DD14', 'DD30', 'DD60', 'date_x', 'temp_arr',
       'date_y', 'temp_arr_3', 'date_x', 'temp_arr_5',
       'date_y', 'temp_arr_7', 'date_x', 'temp_arr_14',
       'date_y', 'temp_arr_30', 'date_x', 'temp_arr_60',
       'date_y', 'temp_dep', 'date_x', 'temp_dep_3',
       'date_y', 'temp_dep_5', 'date_x', 'temp_dep_7',
       'date_y', 'temp_dep_14', 'date_x', 'temp_dep_30',
       'date_y', 'temp_dep_60', 'Дата_x', 'usd', 'Дата_y',
       'usd3', 'Дата_x', 'usd5', 'Дата_y', 'usd7', 'Дата_x', 'usd14',
       'Дата_y', 'usd30', 'Дата_x', 'usd60', 'Дата_y', 'wheat', 'Дата_x',
       'wheat3', 'Дата_y', 'wheat5', 'Дата_x', 'wheat7', 'Дата_y', 'wheat14',
       'Дата_x', 'wheat30', 'Дата_y', 'wheat60']
    res_df = res_df[['DD', 'PASS_BK', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60']]
    res_df = res_df.iloc[1:-1]
    dow = pd.to_datetime(res_df['DD']).dt.dayofweek.astype(str)
    res_df = res_df.set_index('DD')
    res_df = scaler.fit_transform(res_df)
    res_df = pd.DataFrame(res_df)
    res_df['dow'] = dow
    res_df.columns = ['value', 'temp_arr',
          'temp_arr_3', 'temp_arr_5',
          'temp_arr_7', 'temp_arr_14',
          'temp_arr_30', 'temp_arr_60',
          'temp_dep', 'temp_dep_3',
          'temp_dep_5', 'temp_dep_7',
          'temp_dep_14', 'temp_dep_30',
          'temp_dep_60', 'usd', 
          'usd3', 'usd5', 'usd7', 'usd14',
          'usd30', 'usd60', 'wheat',
          'wheat3', 'wheat5', 'wheat7', 'wheat14',
          'wheat30', 'wheat60', 'dow']
    res_df = res_df[['temp_arr',
          'temp_arr_3', 'temp_arr_5',
          'temp_arr_7', 'temp_arr_14',
          'temp_arr_30', 'temp_arr_60',
          'temp_dep', 'temp_dep_3',
          'temp_dep_5', 'temp_dep_7',
          'temp_dep_14', 'temp_dep_30',
          'temp_dep_60', 'usd', 
          'usd3', 'usd5', 'usd7', 'usd14',
          'usd30', 'usd60', 'wheat',
          'wheat3', 'wheat5', 'wheat7', 'wheat14',
          'wheat30', 'wheat60', 'dow']]
    res_df = res_df.loc[:,~res_df.columns.duplicated()].copy()
    class_df_ff = class_df_X.loc[class_df_X['group']==str(flight_num)]
    res_df['time_idx'] = np.arange(class_df_ff['time_idx'].values[-1]+1,
                                   class_df_ff['time_idx'].values[-1]+len(res_df)+1)
    res_df['group'] = str(flight_num)
    res_df['value'] = 0.0
    i = 0
    test = class_df_ff[-1*enc_len:]

    while i <= (len(res_df) // pred_len) - 1:
        #print(res_df['dow'])
        cur_dow = str(int(res_df['dow'].values[-1]) + 1)
        #print(cur_dow)
        test = test.append(res_df[i*pred_len:(i+1)*pred_len], ignore_index=True)
        i += 1
        #test = class_df_X.loc[class_df_X['group']==str(flight_num)][-30:].append(res_df[:30])
        #print(test.tail(35))
        test.loc[test.index[-1],'dow'] = cur_dow
        #print(test)
        predictions = model.predict(test, return_y=True) * (max(1, i - 0.5))
        #print(')))))', pd.DataFrame(predictions.output[-1]).values)
        test.loc[test.index[-1*pred_len:],'value'] = pd.DataFrame(predictions.output[-1]).values - 40
    return test

pred = predict_by_flight_num(1125)['value'].values

plt.plot(pred)

a = class_df_X.loc[class_df_X['group']=='1125']
b = predict_by_flight_num(1125)
orig = b['LEG_ORIG'].values[0]
dest = b['LEG_DEST'].values[0]
res_df = pd.DataFrame([['2019-12-31', orig, dest, 1125, 'N', 0]],
                columns=['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK'])
res_df = res_df.append(pd.DataFrame([['2021-01-01', orig, dest, 1125, 'N', 0]],
                columns=['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK']))
res_df['DD2'] = pd.to_datetime(res_df['DD'])
res_df = res_df.set_index('DD2')
res_df = res_df.asfreq('D')
res_df = res_df.fillna(method='ffill')
res_df['DD'] = res_df.index.values
res_df['DD'] = res_df['DD'].astype(str)
res_df['DD3'] = pd.to_datetime(res_df['DD']) - timedelta(days=3)
res_df['DD5'] = pd.to_datetime(res_df['DD']) - timedelta(days=5)
res_df['DD7'] = pd.to_datetime(res_df['DD']) - timedelta(days=7)
res_df['DD14'] = pd.to_datetime(res_df['DD']) - timedelta(days=14)
res_df['DD30'] = pd.to_datetime(res_df['DD']) - timedelta(days=30)
res_df['DD60'] = pd.to_datetime(res_df['DD']) - timedelta(days=60)
res_df['DD3'] = res_df['DD3'].astype(str)
res_df['DD5'] = res_df['DD5'].astype(str)
res_df['DD7'] = res_df['DD7'].astype(str)
res_df['DD14'] = res_df['DD14'].astype(str)
res_df['DD30'] = res_df['DD30'].astype(str)
res_df['DD60'] = res_df['DD60'].astype(str)
res_df = pd.merge(res_df, msc_temp, left_on='DD', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD3', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD5', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD7', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD14', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD30', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD60', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD3', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD5', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD7', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD14', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD30', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD60', right_on='date', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD3', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD5', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD7', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD14', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD30', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD60', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD3', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD5', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD7', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD14', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD30', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD60', right_on='Дата', how='inner')

res_df['DD'] = res_df['DD'].astype(str)
res_df['DD3'] = pd.to_datetime(res_df['DD']) - timedelta(days=3)
res_df['DD5'] = pd.to_datetime(res_df['DD']) - timedelta(days=5)
res_df['DD7'] = pd.to_datetime(res_df['DD']) - timedelta(days=7)
res_df['DD14'] = pd.to_datetime(res_df['DD']) - timedelta(days=14)
res_df['DD30'] = pd.to_datetime(res_df['DD']) - timedelta(days=30)
res_df['DD60'] = pd.to_datetime(res_df['DD']) - timedelta(days=60)
res_df['DD3'] = res_df['DD3'].astype(str)
res_df['DD5'] = res_df['DD5'].astype(str)
res_df['DD7'] = res_df['DD7'].astype(str)
res_df['DD14'] = res_df['DD14'].astype(str)
res_df['DD30'] = res_df['DD30'].astype(str)
res_df['DD60'] = res_df['DD60'].astype(str)
res_df = pd.merge(res_df, msc_temp, left_on='DD', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD3', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD5', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD7', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD14', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD30', right_on='date', how='inner')
res_df = pd.merge(res_df, msc_temp, left_on='DD60', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD3', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD5', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD7', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD14', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD30', right_on='date', how='inner')
res_df = pd.merge(res_df, aed_temp, left_on='DD60', right_on='date', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD3', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD5', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD7', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD14', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD30', right_on='Дата', how='inner')
res_df = pd.merge(res_df, usd_rub, left_on='DD60', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD3', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD5', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD7', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD14', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD30', right_on='Дата', how='inner')
res_df = pd.merge(res_df, wheat, left_on='DD60', right_on='Дата', how='inner')
res_df

res_df.columns = ['DD', 'SORG', 'SDST', 'FLT_NUM', 'SEG_CLASS_CODE', 'PASS_BK', 'DD3', 'DD5',
       'DD7', 'DD14', 'DD30', 'DD60', 'date_x', 'temp_arr',
       'date_y', 'temp_arr_3', 'date_x', 'temp_arr_5',
       'date_y', 'temp_arr_7', 'date_x', 'temp_arr_14',
       'date_y', 'temp_arr_30', 'date_x', 'temp_arr_60',
       'date_y', 'temp_dep', 'date_x', 'temp_dep_3',
       'date_y', 'temp_dep_5', 'date_x', 'temp_dep_7',
       'date_y', 'temp_dep_14', 'date_x', 'temp_dep_30',
       'date_y', 'temp_dep_60', 'Дата_x', 'usd', 'Дата_y',
       'usd3', 'Дата_x', 'usd5', 'Дата_y', 'usd7', 'Дата_x', 'usd14',
       'Дата_y', 'usd30', 'Дата_x', 'usd60', 'Дата_y', 'wheat', 'Дата_x',
       'wheat3', 'Дата_y', 'wheat5', 'Дата_x', 'wheat7', 'Дата_y', 'wheat14',
       'Дата_x', 'wheat30', 'Дата_y', 'wheat60']
res_df = res_df[['DD', 'PASS_BK', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60']]
res_df = res_df.iloc[1:-1]
res_df['dow'] = pd.to_datetime(res_df['DD']).dt.dayofweek
res_df = res_df.set_index('DD')
res_df = scaler.fit_transform(res_df)
res_df = pd.DataFrame(res_df)
res_df.columns = ['value', 'temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60', 'dow']
res_df = res_df[['temp_arr',
       'temp_arr_3', 'temp_arr_5',
       'temp_arr_7', 'temp_arr_14',
       'temp_arr_30', 'temp_arr_60',
       'temp_dep', 'temp_dep_3',
       'temp_dep_5', 'temp_dep_7',
       'temp_dep_14', 'temp_dep_30',
       'temp_dep_60', 'usd', 
       'usd3', 'usd5', 'usd7', 'usd14',
       'usd30', 'usd60', 'wheat',
       'wheat3', 'wheat5', 'wheat7', 'wheat14',
       'wheat30', 'wheat60', 'dow']]
res_df = res_df.loc[:,~res_df.columns.duplicated()].copy()

res_df

res_df['time_idx'] = np.arange(730, 730+364)
res_df['group'] = '1125'
res_df['value'] = 0.0

test.loc[test.index[-30:],'value'] = 1488
test

i = 0
test = class_df_X.loc[class_df_X['group']=='1125'][-30:]
while i <= len(res_df) // 30:
    test = test.append(res_df[i*30:(i+1)*30])
    
    i += 1

test = class_df_X.loc[class_df_X['group']=='1125'][-30:].append(res_df[:30])
print(len(test))
test

test = class_df_X.loc[class_df_X['group']=='1125'][-30:].append(res_df[:30])
predictions = model.predict(test, return_y=True)

pd.DataFrame(predictions.output[-1]).plot()

